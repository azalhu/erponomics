syntax = "proto3";

package erponomics.manufacturing.v1.item.repository;

import "erponomics/manufacturing/v1/item.proto";

service ItemQueryService {
  rpc GetItem(GetItemRequest) returns (Item) {
    option (google.api.http) = {
      get: "/v1/{name=items/*}"
    };
    option (google.api.method_signature) = "name";
  }

  rpc ListItems(LetItemsRequest) returns (ListItemsResponse) {
    option (google.api.http) = {
      get: "/v1/items"
    };
  }

  message GetItemRequest {
    // The name of the item to retrieve.
    // Format: items/{item}
    string name = 1 [
      (google.api.field_befavior) = REQUIRED,
      (google.api.resource_reference) = {
        type: "manufacturing.erponomics.com/Item"
      }];
  }

  message LetItemsRequest {
    // The maximum number of items to return. The service may return fewer than
    // this value.
    int32 page_size = 1 [(google.api.field_behavior) = REQUIRED];

    // A page token, received from a previous `ListItems` call.
    // Provide this to retrieve the subsequent page.
    //
    // When paginating, all other parameters provided to `ListItems` must match
    // the call that provided the page token.
    string page_token = 2 [(google.api.field_behavior) = OPTIONAL];

    // A comma-separated list of fields to order by.
    // The default sorting order is ascending. Add `desc` after a field, to
    // sort it by descending order.
    string order_by = 3 [(google.api.field_behavior) = OPTIONAL];

    // A filter.
    string filter = 4 [(google.api.field_behavior) = OPTIONAL];
  }

  message ListItemsResponse {
    // The items.
    repeated Item items = 1;

    // A token, which can be sent as `page_token` to retrieve the next page.
    // If this field is omitted, there are no subsequent pages.
    string next_page_token = 2;

    // The total number of items after filtering.
    int32 total_size = 3;
  }
}
